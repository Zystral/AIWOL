arc(a, b).
arc(c, f).
arc(f, e).
arc(b, c).
arc(d, f).
arc(b, d).
arc(c, e).

path(Start, End) :-
	arc(Start, End).
path(Start, End) :-
	arc(Start, Next),
	path(Next, End).
	

plus(0, Y, Y).
plus(s(X), Y, s(Z)) :-
	plus(X, Y, Z).

odd(N) :-
	plus(X, s(X), N).

ones_zeros([]).
ones_zeros( [1 | List] ) :-
	ones_zeros(List).
ones_zeros([0 | List]) :-
	ones_zeros(List).

hasdups([X | List]) :-
	member(X, List).
hasdups([_ | List]) :-
	hasdups(List).

prod([Elem], Elem).
prod([Elem | List], Prod) :-
	prod(List, Prev),
	Prod is Elem * Prev. 

contains(List1, List2, 0) :-
	append(List2, X, List1).
contains(List, Sublist, N) :-
	append(Prefix, Sublist, Front),	
	length(Prefix, N),
	append(Front, _, List).

all_members([], _).
all_members([Elem | List1], List2) :-
	member(Elem, List2),
	all_members(List1, List2).

pairs([], []).
pairs([Elem | List1], [(U, V) | List2]) :-
	U is Elem - 1,
	V is Elem + 1,
	pairs(List1, List2).

arbpairs([], []).
arbpairs([N | List1], [(N,N) | List2]) :-
	arbpairs(List1, List2).
arbpairs([N | List1], [(N, L) | List2]) :-
	L is N * 2,
	arbpairs(List1, List2).






no_attack([], q(_,_)).
no_attack([q(M1, N1) | PartialSolution], q(M2, N2)) :-
	no_danger(M1, N1, M2, N2),
	no_attack(PartialSolution, q(M2, N2)).
no_danger(M1, N1, M2, N2) :-
	N1 \= N2,
	Difference is M1 - M2,
	PlusN is N2 + Difference,  
	MinusN is N2 - Difference, 
	N1 \= PlusN,
	N2 \= MinusN.

template([q(1,_),q(2,_),q(3,_),q(4,_),q(5,_),q(6,_),q(7,_),q(8,_)]).

queens8([]).
queens8([q(M,N) | Rest]) :-
	in_range(1,8,N),
	queens8(Rest),
	no_attack(Rest, q(M,N)).

in_range(Min, Max, Min) :-
Min =< Max. % to be on the safe side
in_range(Min, Max, X) :-
Min < Max,
NextMin is Min + 1,
in_range(NextMin, Max, X).
