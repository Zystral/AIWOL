%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                         %
%         276 Introduction to Prolog                      %
%                                                         %
%         Practice Lexis Test                             %
%                                                         %
%                                                         %
%         Question 2 (graphs)                             %
%                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Some examples for testing %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

testgraph(g1,
          [b > f, f > c, c > b, g > h, g > g, d, b, f > k, k > f, f > c],
          graph([b,c,d,f,g,h,k],
                [e(b,f),e(c,b),e(f,c),e(f,k),e(g,g),e(g,h),e(k,f)]),
          [n(b,[f]),n(c,[b]),n(d,[]),n(f,[c,k]),n(g,[g,h]),n(h,[]),n(k,[f])]).
testgraph(g2,
          [s, s > r, t, u > r, s > u, u > s, v > u],
          graph([r,s,t,u,v],[e(s,r),e(s,u),e(u,r),e(u,s),e(v,u)]),
          [n(r,[]),n(s,[r,u]),n(t,[]),n(u,[r,s]),n(v,[u])]).
testgraph(g3,
          [p>q, m>q, q>m, m>p, p>p],
          graph([m,p,q],[e(m,p),e(m,q),e(p,p),e(p,q),e(q,m)]),
          [n(m,[p,q]),n(p,[p,q]),n(q,[m])]).


%%%%%%% End of test examples %%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                  %
%         Question 2 (graphs)                      %
%                                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% ------ Add your code to this file here.

merged_ordered([], Right, Right).
merged_ordered([Elem| Left], [], [Elem| Left]).
merged_ordered([Elem | Left], [Elem | Right], [Elem | Merged]) :-
	merged_ordered(Left, Right, Merged).
merged_ordered([Elem1 | Left], [Elem2 | Right], [Elem1 | Merged]) :-
	Elem1 @< Elem2,
	merged_ordered(Left, [Elem2 | Right], Merged).
merged_ordered([Elem1 | Left], [Elem2 | Right], [Elem2 | Merged]) :-
	merged_ordered([Elem1 | Left], Right, Merged).

hf_to_graph_term([], graph([],[])).
hf_to_graph_term(Hform, Graph) :-
	recurse_hf_to_graph_term(Hform, graph([],[]), Graph).
recurse_hf_to_graph_term([A > B | Hform], graph(Nodes, Edges), Graph) :-
	merged_ordered([A,B], Nodes, NewNodes),
	merged_ordered([e(A,B)], Edges, NewEdges),
	recurse_hf_to_graph_term(Hform, graph(NewNodes, NewEdges), Graph).
recurse_hf_to_graph_term([A | Hform], graph(Nodes, Edges), Graph) :-
	merged_ordered([A], Nodes, NewNodes),
	recurse_hf_to_graph_term(Hform, graph(NewNodes, Edges), Graph). 
recurse_hf_to_graph_term([], Graph, Graph).




